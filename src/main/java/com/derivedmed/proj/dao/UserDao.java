package com.derivedmed.proj.dao;

import com.derivedmed.proj.model.User;
import com.derivedmed.proj.util.rsparser.ResultSetParser;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

public class UserDao implements CrudDao<User> {

    private static Logger LOGGER = LogManager.getLogger(UserDao.class);
    private final String SQL_EXCEPTION = "SQL exception user DAO";
    private final String CREATE_SQL = "INSERT INTO users (role_id, email, password) VALUES (?, ?, ?)";
    private final String GET_BY_ID_SQL = "SELECT * from users where user_id = ?";
    private final String UPDATE_SQL = "UPDATE users SET email = ?, password = ?, role_id = ? WHERE user_id = ?";
    private final String DELETE_SQL = "delete from users where user_id =?";
    private final String GET_ALL_SQL = "select * from users";
    private final String DELETE_ALL_SQL = "DELETE FROM users";
    private final String CHECK_SPEAKER_ACTIV_BY_DATE_SQL = "select * from users_reports ur join reports r ON ur.report_id = r.report_id JOIN confs c ON r.conf_id = c.conf_id where ur.user_id =? and c.conf_date =? and ur.active_speaker =?;";
    private final String REGISTER_USER_TO_REPORT_SQL = "insert into users_reports (user_id, report_id) values(?, ?)";
    private final String GET_SPEAKER_BY_RATING_SQL = "select * from users where role_id = ? order by rating desc";

    @Override
    public int create(User user) {
        int autoGeneratedId = 0;
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy
                     .prepareStatement(CREATE_SQL, Statement.RETURN_GENERATED_KEYS)) {
            preparedStatement.setInt(1, user.getRole_id());
            preparedStatement.setString(2, user.getLogin());
            preparedStatement.setString(3, user.getPassword());
            preparedStatement.executeUpdate();
            ResultSet id = preparedStatement.getGeneratedKeys();
            id.next();
            autoGeneratedId = id.getInt(1);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return 0;
        }
        return autoGeneratedId;
    }

    @Override
    public User getByID(int id) {
        User user = new User();
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy
                     .prepareStatement(GET_BY_ID_SQL)) {
            preparedStatement.setInt(1, id);
            ArrayList<User> resultList = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), user);
            if (resultList.size() != 0) {
                user = resultList.get(0);
            } else {
                System.out.println("No user with such id");
            }
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return user;
    }

    @Override
    public boolean update(User user) {
        try (ConnectionProxy connection = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(UPDATE_SQL)) {
            preparedStatement.setString(1, user.getLogin());
            preparedStatement.setString(2, user.getPassword());
            preparedStatement.setInt(3, user.getRole_id());
            preparedStatement.setInt(4, user.getId());
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    @Override
    public boolean delete(int id) {
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(DELETE_SQL)) {
            preparedStatement.setInt(1, id);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    @Override
    public List<User> getAll() {
        ArrayList<User> resultList = new ArrayList<>();
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_ALL_SQL)) {
            resultList = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new User());
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return resultList;
    }

    @Override
    public boolean clearAll() {
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             Statement statement = connectionProxy.createStatement()) {
            statement.executeUpdate(DELETE_ALL_SQL);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    public boolean isSpeakerFreeThisDate(User user, Timestamp timestamp) {
        boolean result = false;
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(CHECK_SPEAKER_ACTIV_BY_DATE_SQL)) {
            preparedStatement.setInt(1, user.getId());
            preparedStatement.setTimestamp(2, timestamp);
            preparedStatement.setBoolean(3,true);
            result = preparedStatement.executeQuery().next();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION,e);
            return false;
        }
        return !result;
    }

    public boolean registerUserToReport(int userId, int reportId) {
        try {
            try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
                 PreparedStatement preparedStatement = connectionProxy.prepareStatement(REGISTER_USER_TO_REPORT_SQL)) {
                preparedStatement.setInt(1, userId);
                preparedStatement.setInt(2, reportId);
                preparedStatement.executeUpdate();
            }
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION,e);
            return false;
        }
        return true;
    }

    public List<User> getSpeakersByRating() {
        ArrayList<User> resultList = new ArrayList<>();
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_SPEAKER_BY_RATING_SQL)) {
            preparedStatement.setInt(1, 3);
            resultList = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new User());
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION,e);
        }
        return resultList;
    }
    public boolean authUser(String login, String password) {
        boolean result = false;
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy
                     .prepareStatement("select * from users where email = ? and password = ?")) {
            preparedStatement.setString(1,login);
            preparedStatement.setString(2,password);
            result = preparedStatement.executeQuery().next();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return result;
    }

    public User getByLogin(String login){
        User user = new User();
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
        PreparedStatement preparedStatement = connectionProxy
                .prepareStatement("select * from users where email = ?")){
            preparedStatement.setString(1,login);
            user = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(),new User()).get(0);

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return user;
    }
}
