package com.derivedmed.proj.dao;

import com.derivedmed.proj.model.Conf;
import com.derivedmed.proj.util.rsparser.ResultSetParser;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class ConfDao implements CrudDao<Conf> {

    private static Logger LOGGER = LogManager.getLogger(ConfDao.class);
    private final String SQL_EXCEPTION = "SQL exception Conf DAO";
    private final String CREATE_SQL = "insert into confs (conf_id,conf_name,conf_place,conf_date) values(?,?,?,?)";
    private final String GET_BY_ID_SQL = "SELECT * from confs where conf_id = ?";
    private final String UPDATE_SQL = "UPDATE confs SET conf_name = ?, conf_place = ?, conf_date = ? where conf_id = ?";
    private final String DELETE_SQL = "delete from confs where conf_id =?";
    private final String GET_ALL_SQL = "select * from confs";
    private final String CLEAR_ALL_SQL = "DELETE FROM confs";

    @Override
    public int create(Conf conf) {
        int autoGeneratedId = 0;
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy
                     .prepareStatement(CREATE_SQL)) {
            preparedStatement.setInt(1, conf.getId());
            preparedStatement.setString(2, conf.getName());
            preparedStatement.setString(3, conf.getPlace());
            preparedStatement.setTimestamp(4, conf.getDate());
            preparedStatement.executeUpdate();
            ResultSet id = preparedStatement.getGeneratedKeys();
            id.next();
            autoGeneratedId = id.getInt(1);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return autoGeneratedId;
    }

    @Override
    public Conf getByID(int id) {
        Conf conf = new Conf();
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy
                     .prepareStatement(GET_BY_ID_SQL)) {
            preparedStatement.setInt(1, id);
            conf = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Conf()).get(0);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return conf;
    }

    @Override
    public boolean update(Conf conf) {
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy
                     .prepareStatement(UPDATE_SQL)) {
            preparedStatement.setString(1, conf.getName());
            preparedStatement.setString(2, conf.getPlace());
            preparedStatement.setTimestamp(3, conf.getDate());
            preparedStatement.setInt(4, conf.getId());
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    @Override
    public boolean delete(int id) {
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(DELETE_SQL)) {
            preparedStatement.setInt(1, id);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    @Override
    public List<Conf> getAll() {
        ArrayList<Conf> resultList = new ArrayList<>();
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_ALL_SQL)) {
            resultList = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Conf());
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return resultList;
    }

    @Override
    public boolean clearAll() {
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             Statement statement = connectionProxy.createStatement()) {
            statement.executeUpdate(CLEAR_ALL_SQL);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }
}
