package com.derivedmed.proj.dao;

import com.derivedmed.proj.model.Report;
import com.derivedmed.proj.util.rsparser.ResultSetParser;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class ReportDao implements CrudDao<Report> {

    private static Logger LOGGER = LogManager.getLogger(ReportDao.class);
    private final String SQL_EXCEPTION = "SQL exception Report DAO";
    private final String CREATE_SQL = "insert into reports (report_id,conf_id,report_name,report_desk) values(?,?,?,?)";
    private final String GET_BY_ID_SQL = "SELECT * from reports where report_id = ?";
    private final String UPDATE_SQL = "UPDATE reports SET conf_id = ?, report_name = ?, report_desk = ? WHERE report_id = ?";
    private final String DELETE_SQL = "delete from reports where report_id =?";
    private final String GET_ALL_SQL = "select * from reports";
    private final String CLEAR_ALL_SQL = "DELETE FROM reports";
    private final String GET_REPORTS_BY_USER_ID_SQL = "SELECT reports.report_id,conf_id, report_name,report_desk FROM reports JOIN users_reports u ON reports.report_id = u.report_id WHERE u.user_id = ?;";
    private final String GET_PAST_REPORTS_SQL = "SELECT reports.report_id,conf_id, report_name,report_desk FROM reports JOIN confs c ON reports.conf_id = c.conf_id WHERE c.conf_date < ?;";
    private final String GET_UPCOMING_REPORTS_SQL = "SELECT reports.report_id,conf_id, report_name,report_desk FROM reports JOIN confs c ON reports.conf_id = c.conf_id WHERE c.conf_date > ?;";
    private final String OFFER_REPORT_SQL = "update users_reports set active_speaker=?, by_speaker = ?, by_moder=? ,confirmed =? where user_id =? and report_id =?"; //FIXME wrong querry
    private final String CONFIRM_REPORT_SQL = "update users_reports set active_speaker = ?, confirmed = ? where user_id = ? and report_id = ?";


    @Override
    public int create(Report report) {
        int autoGeneratedId = 0;
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy
                     .prepareStatement(CREATE_SQL)) {
            preparedStatement.setInt(1, report.getId());
            preparedStatement.setInt(2, report.getConf_id());
            preparedStatement.setString(3, report.getReport_name());
            preparedStatement.setString(4, report.getReport_description());
            preparedStatement.executeUpdate();
            ResultSet id = preparedStatement.getGeneratedKeys();
            id.next();
            autoGeneratedId = id.getInt(1);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return autoGeneratedId;
    }

    @Override
    public Report getByID(int id) {
        Report report = new Report();
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_BY_ID_SQL)) {
            preparedStatement.setInt(1, id);
            report = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Report()).get(0);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return report;
    }

    @Override
    public boolean update(Report report) {
        try (ConnectionProxy connection = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(UPDATE_SQL)) {
            preparedStatement.setInt(1, report.getConf_id());
            preparedStatement.setString(2, report.getReport_name());
            preparedStatement.setString(3, report.getReport_description());
            preparedStatement.setInt(4, report.getId());
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    @Override
    public boolean delete(int id) {
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(DELETE_SQL)) {
            preparedStatement.setInt(1, id);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    @Override
    public List<Report> getAll() {
        ArrayList<Report> resultList = new ArrayList<>();
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_ALL_SQL)) {
            resultList = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Report());
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return resultList;
    }

    @Override
    public boolean clearAll() {
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             Statement statement = connectionProxy.createStatement()) {
            statement.executeUpdate(CLEAR_ALL_SQL);
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    public List<Report> getReportsByUserId(int id) {
        ArrayList<Report> reports = new ArrayList<>();
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_REPORTS_BY_USER_ID_SQL)) {
            preparedStatement.setInt(1, id);
            reports = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Report());
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return reports;
    }

    public List<Report> getPastReports() {
        ArrayList<Report> reports = new ArrayList<>();
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_PAST_REPORTS_SQL)) {
            preparedStatement.setTimestamp(1, new Timestamp(new Date().getTime()));
            reports = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Report());
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return reports;
    }

    public List<Report> getUpcomingReports() {
        ArrayList<Report> reports = new ArrayList<>();
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(GET_UPCOMING_REPORTS_SQL)) {
            preparedStatement.setTimestamp(1, new Timestamp(new Date().getTime()));
            reports = ResultSetParser.getInstance().parse(preparedStatement.executeQuery(), new Report());
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
        }
        return reports;
    }

    public boolean offerReport(int speakerId, int reportId, boolean bySpeaker) {
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(OFFER_REPORT_SQL)) {
            preparedStatement.setBoolean(1, false);
            preparedStatement.setBoolean(2, bySpeaker);
            preparedStatement.setBoolean(3, !bySpeaker);
            preparedStatement.setBoolean(4, false);
            preparedStatement.setInt(5, speakerId);
            preparedStatement.setInt(6, reportId);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }

    public boolean confirmOffer(int userId,int reportId) {
        try (ConnectionProxy connectionProxy = TransactionManager.getInstance().getConnection();
             PreparedStatement preparedStatement = connectionProxy.prepareStatement(CONFIRM_REPORT_SQL)) {
            preparedStatement.setBoolean(1, true);
            preparedStatement.setBoolean(2, true);
            preparedStatement.setInt(3, userId);
            preparedStatement.setInt(4, reportId);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            LOGGER.error(SQL_EXCEPTION, e);
            return false;
        }
        return true;
    }
}
